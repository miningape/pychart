create a        ; add 'a' variable to the list
create b        ; add 'b' variable to the list
; this tells the interpreter to make a new variable

push   a, 55    ; push the value 55 into 'a'
push   b, 55    ; push the value 55 into 'b'
; can push both literals and variables
; haven't decided whether this should be by reference or copy
; although 'push' would suggest moving into the variable
; maybe we should have a 'ref' ('reference', 'copy') mnemonic 

add    a, a, b  ; add the variables 'a', 'b', and store it in 'a'
; operators are all in the form 'op ret, a, b'
; except for unary operators they are 'op ret, var' 
call   c, [a, b]; call the function 'c' with the arguments 'a' and 'b'

; define 'identifier' as a function 
func a [arg0, arg1, arg2]
create result
gt  result, arg0, arg2 
jez result, <location>
ret  arg1
<location>
ret  arg0; returns null

; generation of if statements
;  if ( condition )
; is turned into
;  create "if line number file"
;  cmp "if line number file", condition, 0
;  jnz condition "if line number label"
;   --- this is the false branch
;  jump "if line number file end"
;  "if line number label":
;   --- this is the true branch
;  jump "if line number file end"
;   --- this is the end of the if condition
;
; this means in reality the function above looks something like this
func a [arg0, arg1, arg2]
create result
gt  result, arg0, arg2 
jnz result, <true>
ret  arg1
jmp <end>
<true>
ret  arg0
jmp <end>
;
; in python it would be If(name, condition, true_block, false_block)
; a function will check through this and convert it into offsets
; (also happens at top level)


; [byte]
; [mnemonic][count][args]....



